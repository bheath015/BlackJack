BlackJack! A game of wit!

Play a simulated game of blackjack against a computer that follows the same strategy as the dealer in a casino! I divided this program up into six different classes plus a tester class. The game is played in line with the rules of BlackJack and incorporates the same objects and people that you would see at a casino table with one exception- I divided the role of the casino dealer into both a banker and a computer player. A dealer is really filling two roles at the table, and splitting these roles into two classes allows for the game to be modular (adjust computer player strategies, incorporate gameplay rules in isolated classes, etc.). I will now break down the classes.

1) The Banker class is the referee of the game. This class maintains the rules of the game and is the intermediary between the cards and the individual players’ hands. The banker class ensures that players do not cheat by enforcing rules such as busting, ensures that they do not do anything silly like hit on a hand with 21 points, and ensures that they do not have access to the cards (only the dealer can use the DeckOfCard’s draw() method. Most importantly, in this class we use the judgeWinner() method to check the hands at the table and declare a winner. When interacting with HumanPlayer and ComputerPlayer, the Banker class continues to deal them cards until told otherwise. 

2) The DeckOfCards class is an array of cards represented by integers. There is a mathematic split in between the deck with cards that have yet to been picked, and cards that can no longer be picked (a discard pile). Each time we shuffle we reorder the deck from 0 to 51 and begin picking randomly again while moving picked cards to the discard portion of the array. This class calls on the Card class to decipher the card.

3) The Card class serves to interpret information from the deck array and turn it into a usable card for the players and the banker. It uses a few mathematic equations to decide which card each integer from the deck represents. It specifically does not assign value to the cards because that is the role of the players themselves. 

4) We will now look at the classes with which the Banker class interacts on the other side of our CRC diagram. The most important class is the Hand class. The Hand class maintains the ArrayList of all cards drawn in each hand, creates an ArrayList of characters that is used for scoring hands, and also alerts the banker about a few qualities that a hand can have in line with the rules of BlackJack. Hands are normally just strings of cards, but some other characteristics of a hand can be that it has BlackJack, that it has busted, or that it has reached the optimal score of 21 points. There are boolean methods for each of these to make the Banker class aware of any special elements of the hand. A hand object is created in the Banker class for every player and passed to the player. 

5) We pass a human player’s hand to their HumanPlayer class. The HumanPlayer class is bound to the game structure established by the Banker class and the rules pertaining to the hand written in the Hand class. However, the HumanPlayer is free to do two things- develop a strategy for gameplay and count their points as they see fit (given that an Ace can take on two values). The banker passes the hand information to the HumanPlayer so they cannot lie about their hand, and leaves it to the Human to decide whether or not they want another card. The Human runs its strategy and updates a Boolean variable that alerts the Banker as to whether or not it wants another card if it is allowed one per the rules of the game. We use a scanner response of “hit” to indicate that they want another card. The Banker uses the point total indicated by the human to find a winner (I left this interpretable by the human in case they want to change their strategy and incorporate something like splitting a hand).

6) We pass a computer player’s hand to the ComputerPlayer class. Like the HumanPlayer, they get to design their hitting strategy and their point counting strategy. They set a Boolean variable to indicate to the Banker class when another card must be drawn. Like the human, I left point count to the computer’s discretion so that they can incorporate things like splitting hands. 

7) There is a BlackJackTester class where a Banker object is created and the game is initiated.


——-
CRC Notes:
When I began this project, I wrote out a very raw program just to make sure that all of the components were speaking to each other. I had the same six classes as I eventually used, but they were organized differently. The banker, for example, was more an intermediary and a game organizer than a rule manager and owner of the cards that were being distributed. The banker was passing the shared deck to the players, who would draw through the banker. This caused some coupling which was undesirable (a lot of “this” statements). More importantly, the banker only knew the components of the hand through the players, and did not access the hands directly. This could potentially lead to some naughty activity by either a human or computer player who could obfuscate the cards drawn and cheat. In the end (and with some help from the TAs/Swap), I moved ownership of the hands to the banker and passed those hands to the players. That way, the players were only responsible for devising a strategy/course of action but could not manipulate the hands. This also eliminated any coupling and using methods within classes to access objects of different classes (as I was doing before with players going through the banker to directly draw cards from the deck). 

In its current form, the Banker now creates object deck which calls on the card class to interpret the card. Banker also creates objects of class hand for each player and passes them to player classes. The hand class alerts the banker to static information, and the players devise strategy and relay their request and score to the banker (as those are the only two things that the players should be able to control directly). 

